{"version":3,"sources":["serviceWorkerRegistration.js","image/amiya.png","image/W_05.png","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Clock","props","useState","Date","date","setDate","clickEvent","onClick","useEffect","timerID","setInterval","clearInterval","localDate","Intl","DateTimeFormat","year","month","day","weekday","format","hours","getHours","minites","getMinutes","seconds","getSeconds","ampm","hour24","localTime","className","DateLabel","lblStr","useMemo","toLocaleTimeString","PictureChange","setTimerID","picPath","flg","pic1","pic2","src","alt","clearTimeout","msgFlg","setMsg","reactmsg","list","Math","floor","random","length","setTimeout","SettingButton","Fragment","type","id","defaultChecked","onChange","e","chgMsgFlg","target","checked","htmlFor","chg24Hour","Message","msg","selectMsg","msgList","message","PM","AM","msgPadd","rmsgPadd","reactMsg","style","backgroundColor","AppClock","dateHistory","pictFlag","apptimeStyle","d","this","setState","f","m","bgColor","chgStyle","reactMessage","dateClick","change24Hour","changeMessageFlag","React","Component","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.e00c4ca3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","export default __webpack_public_path__ + \"static/media/amiya.571286db.png\";","export default __webpack_public_path__ + \"static/media/W_05.c7b053ce.png\";","import React, { useEffect, useState, useMemo } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport pic1 from \"./image/amiya.png\";\nimport pic2 from \"./image/W_05.png\";\n\nimport message from \"./message.json\";\nimport reactmsg from \"./reactmsg.json\";\n\n\nfunction Clock(props) {\n    const [date, setDate] = useState(new Date());\n\n    useEffect(() => {\n        const timerID = setInterval(() => { setDate(new Date()); }, 1000);\n\n        return () => {\n            clearInterval(timerID);\n        };\n    }, []);\n\n    function clickEvent() {\n        props.onClick(date);\n    }\n\n    // 時刻表示\n    // 日にち+曜日\n    let opts = { year: 'numeric', month: 'long', day: 'numeric', weekday: 'long' };\n    let localDate = new Intl.DateTimeFormat(\"ja-JP\", opts).format(date);\n\n    // 時間\n    let hours = date.getHours();\n    let minites = date.getMinutes();\n    let seconds = date.getSeconds();\n    let ampm = null;\n\n    if (!props.hour24) {\n        ampm = hours >= 12 ? \"PM\" : \"AM\";\n        hours = hours % 12;\n    }\n    minites = minites < 10 ? \"0\" + minites : minites;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n\n    // let localTime = ampm + hours + \":\" + minites + \":\" + seconds;\n    let localTime = hours + \":\" + minites;\n\n    return (\n        <div>\n            <p className=\"date\" onClick={clickEvent}>\n                {localDate}\n            </p>\n            <div className=\"clock\" onClick={clickEvent}>\n                <div className=\"ampm\">\n                    {ampm}\n                </div>\n                <div className=\"time\">\n                    {localTime}\n                </div>\n                <div className=\"seconds\">\n                    {seconds}\n                </div>\n            </div>\n            {/* <p className=\"clock\" onClick={() => props.onClick(date)}>\n                {date.toLocaleTimeString(\"ja-JP\", { hour12: false })}\n            </p> */}\n        </div>\n    );\n}\n\nfunction DateLabel(props) {\n    // props.date が更新された場合のみ実行するように変更\n    const lblStr = useMemo(() => {\n        if (props.date != null) {\n            let opts = { year: 'numeric', month: 'long', day: 'numeric', weekday: 'long' };\n            let localDate = new Intl.DateTimeFormat(\"ja-JP\", opts).format(props.date);\n            let localTime = props.date.toLocaleTimeString(\"ja-JP\");\n\n            return (localDate + \" \" + localTime);\n        } else {\n            return (\"----年--月--日―曜日 --:--:--\");\n        }\n    }, [props.date]);\n\n    return (\n        <label>{lblStr}</label>\n    );\n}\n\n// srcに配置した場合は import を使うのが一般的らしい\nfunction PictureChange(props) {\n    const [timerID, setTimerID] = useState(null);\n\n    function dialogue() {\n        if (timerID != null) {\n            clearTimeout(timerID);\n        }\n\n        if (props.msgFlg) {\n            props.setMsg(reactmsg.list[Math.floor(Math.random() * reactmsg.list.length)]);\n            setTimerID(setTimeout(() => { props.setMsg(null); }, 3000));\n        } else {\n            props.setMsg(null);\n            setTimerID(null);\n        }\n    }\n\n    // const pic1 = \"/pict/amiya.png\";\n    // const pic2 = \"/pict/W_05.png\";\n    let picPath = props.flg ? pic1 : pic2;\n\n    return (\n        <img src={picPath} alt=\"絵\" className=\"chara-img\" onClick={dialogue} />\n    );\n\n    // public に配置した場合は `${process.env.PUBLIC_URL}` を使う\n    // return (\n    //     <img src={`${process.env.PUBLIC_URL}` + picPath} alt=\"絵\" width=\"320\" height=\"320\" />\n    // );\n}\n\n// トグルボタン\nfunction SettingButton(props) {\n    function changeMessage(e) {\n        props.chgMsgFlg(e.target.checked);\n    }\n\n    function changeHoure(e) {\n       props.chg24Hour(e.target.checked);\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"item-frame\">\n                <input type='checkbox' id='setting_item_1' className=\"checkbox\" defaultChecked onChange={changeMessage} />\n                <label className=\"switch\" htmlFor='setting_item_1'></label>\n                <label className=\"text\" htmlFor='setting_item_1'>つぶやき表示</label>\n            </div>\n            <div className=\"item-frame\" >\n                <input type='checkbox' id='setting_item_2' className=\"checkbox\" defaultChecked onChange={changeHoure} />\n                <label className=\"switch\" htmlFor='setting_item_2'></label>\n                <label className=\"text\" htmlFor='setting_item_2'>24時間表示</label>\n            </div>\n        </React.Fragment>\n    );\n}\n\n\nfunction Message(props) {\n    const [msg, setMsg] = useState(null);\n\n    function selectMsg() {\n        if (msg === null && props.msgFlg) {\n            const date = new Date();\n            const msgList = date.getHours() >= 12 ? message.PM : message.AM;\n            setMsg(msgList[Math.floor(Math.random() * msgList.length)]);\n        } else {\n            setMsg(null);\n        }\n    }\n\n    useEffect(() => {\n        const timerID = setInterval(selectMsg, 3000);\n\n        return () => {\n            clearInterval(timerID);\n        };\n    });\n\n    let msgPadd = msg === null ? 'rgba(222, 219, 202, 0.0)' : 'rgba(222, 219, 202, 0.85)';\n    let rmsgPadd = props.reactMsg === null ? 'rgba(222, 219, 202, 0.0)' : 'rgba(222, 219, 202, 0.85)';\n\n    return (\n        <React.Fragment>\n            <div className=\"message\" style={{ backgroundColor: msgPadd }}>\n                <label>{msg}</label>\n            </div>\n            <div className=\"react-message\" style={{ backgroundColor: rmsgPadd }}>\n                <label>{props.reactMsg}</label>\n            </div>\n        </React.Fragment>\n    );\n}\n\n\nclass AppClock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dateHistory: null,\n            hour24: true,\n            msgFlg: true,\n            pictFlag: 1,\n            reactMsg: null,\n            apptimeStyle: { backgroundColor: \"#8490c8\" }\n        };\n    }\n\n    dateClick(d) {\n        this.setState({\n            dateHistory: d,\n            pictFlag: this.state.pictFlag ^ 1,\n        });\n    }\n\n    change24Hour(f) {\n        this.setState({\n            hour24: f,\n        });\n    }\n\n    changeMessageFlag(f) {\n        this.setState({\n            msgFlg: f,\n        });\n    }\n\n    reactMessage(m) {\n        this.setState({\n            reactMsg: m,\n        });\n    }\n\n    changeApptimeStyle(bgColor) {\n        let chgStyle = {\n            backgroundColor: bgColor\n        }\n\n        this.setState({\n            apptimeStyle: chgStyle\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"app-main\">\n                <div className=\"app-time\" style={this.state.apptimeStyle}>\n                    <PictureChange\n                        flg={this.state.pictFlag}\n                        setMsg={(m) => this.reactMessage(m)}\n                        msgFlg={this.state.msgFlg}\n                    />\n                    <div className=\"app-clock\">\n                        <Clock\n                            onClick={(d) => this.dateClick(d)}\n                            hour24={this.state.hour24}\n                        />\n                        <DateLabel\n                            date={this.state.dateHistory}\n                        />\n                    </div>\n                    <div className=\"app-message\">\n                        <Message\n                            reactMsg={this.state.reactMsg}\n                            msgFlg={this.state.msgFlg}\n                        />\n                    </div>\n                    <div className=\"app-button\">\n                        <SettingButton\n                            chg24Hour={(f) => this.change24Hour(f)}\n                            chgMsgFlg={(f) => this.changeMessageFlag(f)}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <AppClock />,\n    document.getElementById('root')\n);\n\n// PWAに設定\nserviceWorkerRegistration.register();\n\n"],"sourceRoot":""}